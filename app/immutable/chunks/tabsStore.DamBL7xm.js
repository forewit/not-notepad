import{w as p}from"./entry.BY_YvmEg.js";import{g as r}from"./scheduler.CIGC0wka.js";const c={'{"retain":':"⒜",'},{"delete":':"⒝",'}]},"range":{"index":':"⒞",',"length":':"⒟",'}]},"range":null':"⒠",'},{"delta":{"ops":[':"⒡",'"insert":':"⒢",'"attributes":{':"⒣",'"code":true':"⒤",'"code":false':"⒥"},v=Object.fromEntries(Object.entries(c).map(([t,e])=>[e,t]));function f(t,e){for(const[a,n]of Object.entries(e))t=t.split(a).join(n);return t}function b(){return crypto.randomUUID()}function g(t,e){let a;try{a=JSON.parse(e)}catch(n){throw n}if(!a||!a.title||!a.ops||!a.history)throw new Error("Invalid tab data!");h({id:t,data:a})}function I(){let t={};return Object.entries(r(l)).forEach(([e,a])=>{const n=JSON.stringify(a);t[e]=f(n,c)}),t}function m(t){Object.entries(t).forEach(([e,a])=>{const n=f(a,v);g(e,n)})}function h(t){const{id:e=b(),data:a={title:"Untitled",ops:[],history:{undo:[],redo:[]}},index:n=-1,callback:s=()=>{}}=t||{};l.update(d=>d[e]?(d[e]=a,d):(d[e]=a,n<0||n>r(i).order.length?i.update(o=>(o.order.push(e),o.activeIndex=o.order.length-1,o)):i.update(o=>(o.order.splice(n,0,e),o.activeIndex=n,o)),d)),s()}function x(t){r(l)[t]&&(l.update(e=>(delete e[t],e)),i.update(e=>{const a=e.order.indexOf(t);return a<0||(e.placeholderIndex==a&&(e.placeholderIndex=-1),e.order.splice(a,1),a==e.activeIndex-1?e.activeIndex=Math.max(0,a):e.activeIndex=Math.min(e.activeIndex,e.order.length-1)),e}))}function O(t){i.update(e=>(t<0?e.activeIndex=0:t>e.order.length?e.activeIndex=e.order.length-1:e.activeIndex=t,e))}function w(t){i.update(e=>(e.placeholderIndex=t===void 0||t<0||t>=e.order.length?-1:t,e))}function T(t,e,a=()=>{}){t!=e&&(i.update(n=>{if(t<0||t>=n.order.length||e<0||e>=n.order.length)return n;const s=n.order[t];return n.order.splice(t,1),n.order.splice(e,0,s),n.activeIndex==t&&(n.activeIndex=e),n.placeholderIndex==t&&(n.placeholderIndex=e),n}),a())}const S={loadPackedTabs:m,packTabs:I,newTab:h,removeTab:x,setActiveIndex:O,setPlaceholderIndex:w,moveTab:T},l=p({}),i=p({order:[],activeIndex:0,placeholderIndex:-1});export{S as a,i as m,l as t};
