const s=location.pathname.split("/").slice(0,-1).join("/"),p=[s+"/app/immutable/entry/app.BPLEA9fP.js",s+"/app/immutable/nodes/0.G3e5orqr.js",s+"/app/immutable/assets/0.BiMF4S1a.css",s+"/app/immutable/nodes/1.DQ6CHT_H.js",s+"/app/immutable/nodes/2.DXJiDb6Z.js",s+"/app/immutable/assets/2.tiSJCiPs.css",s+"/app/immutable/nodes/3.B9Nh70Xv.js",s+"/app/immutable/assets/3.C2hubh8Z.css",s+"/app/immutable/nodes/4.4gJkl6Mi.js",s+"/app/immutable/assets/4.D9K7nQOp.css",s+"/app/immutable/assets/Spinner.nORNYfl0.css",s+"/app/immutable/chunks/Spinner.DU_sV4I5.js",s+"/app/immutable/chunks/core.CG__ofcG.js",s+"/app/immutable/chunks/each.BP2nLSrP.js",s+"/app/immutable/chunks/entry.RCuiDvyc.js",s+"/app/immutable/chunks/firebaseStore.ClxdZPDh.js",s+"/app/immutable/chunks/index.Bx3bS2zy.js",s+"/app/immutable/chunks/paths.B0Z5yc1J.js",s+"/app/immutable/chunks/preload-helper.D6kgxu3v.js",s+"/app/immutable/chunks/scheduler.CNrmCPBX.js",s+"/app/immutable/chunks/themes.BTx5Q4mv.js",s+"/app/immutable/entry/start.CgZN61AX.js",s+"/app/immutable/chunks/quill.Bk4jDS0q.js"],l=[s+"/images/favicon.png",s+"/images/field_512.png",s+"/images/notepad_512.png",s+"/images/svg/cancel.svg",s+"/images/svg/double-checkmark.svg",s+"/images/svg/gear.svg",s+"/images/svg/home.svg",s+"/images/svg/login.svg",s+"/images/svg/logout.svg",s+"/images/svg/maximize.svg",s+"/images/svg/minimize.svg",s+"/images/svg/notepad.svg",s+"/images/svg/pencil.svg",s+"/images/svg/plus.svg",s+"/images/svg/refresh.svg",s+"/images/svg/swap.svg",s+"/images/svg/trash.svg",s+"/images/svg/triangle-down.svg",s+"/images/svg/triangle-left.svg",s+"/images/svg/triangle-right.svg",s+"/images/svg/triangle-up.svg",s+"/images/svg/undo.svg",s+"/images/svg/user.svg",s+"/manifest.json"],u="1721938168109",m=`cache-${u}`,g=[...p,...l];self.addEventListener("install",e=>{async function t(){await(await caches.open(m)).addAll(g)}e.waitUntil(t())});self.addEventListener("activate",e=>{async function t(){for(const i of await caches.keys())i!==m&&await caches.delete(i)}e.waitUntil(t())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function t(){const i=new URL(e.request.url),n=await caches.open(m);if(g.includes(i.pathname)){const a=await n.match(i.pathname);if(a)return a}try{const a=await fetch(e.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&n.put(e.request,a.clone()),a}catch(a){const c=await n.match(e.request);if(c)return c;throw a}}e.respondWith(t())});
