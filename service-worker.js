const s=location.pathname.split("/").slice(0,-1).join("/"),l=[s+"/app/immutable/entry/app.Cu3YNXzz.js",s+"/app/immutable/nodes/0.BNLZyxIw.js",s+"/app/immutable/assets/0.BG53lEwn.css",s+"/app/immutable/nodes/1.Bh6pumxf.js",s+"/app/immutable/nodes/2.G5v8U-jx.js",s+"/app/immutable/assets/2.mZ5DE549.css",s+"/app/immutable/nodes/3.BtAXExpQ.js",s+"/app/immutable/assets/3.C2hubh8Z.css",s+"/app/immutable/nodes/4.Jz-Zc69G.js",s+"/app/immutable/assets/4.D9K7nQOp.css",s+"/app/immutable/assets/Spinner.nORNYfl0.css",s+"/app/immutable/chunks/Spinner.DVSMDdgP.js",s+"/app/immutable/chunks/core.CG__ofcG.js",s+"/app/immutable/chunks/each.DD9ZPifO.js",s+"/app/immutable/chunks/entry.DdhUfSc1.js",s+"/app/immutable/chunks/firebaseStore.DTWn4U7N.js",s+"/app/immutable/chunks/index.BFcqwp_n.js",s+"/app/immutable/chunks/paths.CFcaBbGw.js",s+"/app/immutable/chunks/preload-helper.D6kgxu3v.js",s+"/app/immutable/chunks/scheduler.BOxWOvYx.js",s+"/app/immutable/chunks/themes.BTx5Q4mv.js",s+"/app/immutable/entry/start.Cx1_cjqE.js",s+"/app/immutable/chunks/quill.Bk4jDS0q.js"],u=[s+"/images/favicon.png",s+"/images/field_512.png",s+"/images/svg/cancel.svg",s+"/images/svg/double-checkmark.svg",s+"/images/svg/gear.svg",s+"/images/svg/home.svg",s+"/images/svg/login.svg",s+"/images/svg/logout.svg",s+"/images/svg/plus.svg",s+"/images/svg/refresh.svg",s+"/images/svg/swap.svg",s+"/images/svg/trash.svg",s+"/images/svg/triangle-down.svg",s+"/images/svg/triangle-left.svg",s+"/images/svg/triangle-right.svg",s+"/images/svg/triangle-up.svg",s+"/manifest.json"],r="1721147777029",c=`cache-${r}`,p=[...l,...u];self.addEventListener("install",e=>{async function i(){await(await caches.open(c)).addAll(p)}e.waitUntil(i())});self.addEventListener("activate",e=>{async function i(){for(const t of await caches.keys())t!==c&&await caches.delete(t)}e.waitUntil(i())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function i(){const t=new URL(e.request.url),n=await caches.open(c);if(p.includes(t.pathname)){const a=await n.match(t.pathname);if(a)return a}try{const a=await fetch(e.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&n.put(e.request,a.clone()),a}catch(a){const m=await n.match(e.request);if(m)return m;throw a}}e.respondWith(i())});
