const e=location.pathname.split("/").slice(0,-1).join("/"),p=[e+"/app/immutable/entry/app.DEsJbsJc.js",e+"/app/immutable/nodes/0.Cm8dISdb.js",e+"/app/immutable/assets/0.CwgjanyS.css",e+"/app/immutable/nodes/1.jRzuLf_F.js",e+"/app/immutable/nodes/2.BwfToOP0.js",e+"/app/immutable/assets/2.DTlR0Po2.css",e+"/app/immutable/chunks/entry.tmWr6J6Z.js",e+"/app/immutable/chunks/index.HXHA9SiQ.js",e+"/app/immutable/chunks/scheduler.CtbWrGNo.js",e+"/app/immutable/entry/start.Db8nKdNX.js"],l=[e+"/images/favicon.png",e+"/images/field_512.png",e+"/manifest.json"],u="1716473759130",i=`cache-${u}`,r=[...p,...l];self.addEventListener("install",s=>{async function n(){await(await caches.open(i)).addAll(r)}s.waitUntil(n())});self.addEventListener("activate",s=>{async function n(){for(const a of await caches.keys())a!==i&&await caches.delete(a)}s.waitUntil(n())});self.addEventListener("fetch",s=>{if(s.request.method!=="GET")return;async function n(){const a=new URL(s.request.url),c=await caches.open(i);if(r.includes(a.pathname)){const t=await c.match(a.pathname);if(t)return t}try{const t=await fetch(s.request);if(!(t instanceof Response))throw new Error("invalid response from fetch");return t.status===200&&c.put(s.request,t.clone()),t}catch(t){const o=await c.match(s.request);if(o)return o;throw t}}s.respondWith(n())});
