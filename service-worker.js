const s=location.pathname.split("/").slice(0,-1).join("/"),l=[s+"/app/immutable/entry/app.nUl5uBLW.js",s+"/app/immutable/nodes/0.CYjUYiXP.js",s+"/app/immutable/assets/0.BMJJ3nCK.css",s+"/app/immutable/nodes/1.BmN6OrSP.js",s+"/app/immutable/nodes/2.C487SOwq.js",s+"/app/immutable/assets/2.DDFpqBWO.css",s+"/app/immutable/nodes/3.DJ0elUt1.js",s+"/app/immutable/assets/3.C2hubh8Z.css",s+"/app/immutable/nodes/4.xlXhADKm.js",s+"/app/immutable/assets/4.BNTAYDIz.css",s+"/app/immutable/assets/Spinner.DVk0brZ3.css",s+"/app/immutable/chunks/Spinner.C3JSi9wk.js",s+"/app/immutable/chunks/core.CG__ofcG.js",s+"/app/immutable/chunks/each.COQoO-Ld.js",s+"/app/immutable/chunks/entry.JzZDWLnY.js",s+"/app/immutable/chunks/firebaseStore.C2QUKW7s.js",s+"/app/immutable/chunks/index.Bn23-NmW.js",s+"/app/immutable/chunks/paths.CGHsPe4t.js",s+"/app/immutable/chunks/preload-helper.D6kgxu3v.js",s+"/app/immutable/chunks/scheduler.uUNFeN3d.js",s+"/app/immutable/chunks/settingsStore.DeGROka0.js",s+"/app/immutable/chunks/tabsStore.C1N_SFzX.js",s+"/app/immutable/chunks/themes.BTx5Q4mv.js",s+"/app/immutable/entry/start.BbGTPMyh.js",s+"/app/immutable/chunks/quill.Bk4jDS0q.js"],u=[s+"/images/favicon.png",s+"/images/field_512.png",s+"/images/svg/cancel.svg",s+"/images/svg/double-checkmark.svg",s+"/images/svg/gear.svg",s+"/images/svg/login.svg",s+"/images/svg/logout.svg",s+"/images/svg/plus.svg",s+"/images/svg/swap.svg",s+"/images/svg/triangle-down.svg",s+"/images/svg/triangle-left.svg",s+"/images/svg/triangle-right.svg",s+"/images/svg/triangle-up.svg",s+"/manifest.json"],o="1720555156412",c=`cache-${o}`,p=[...l,...u];self.addEventListener("install",e=>{async function i(){await(await caches.open(c)).addAll(p)}e.waitUntil(i())});self.addEventListener("activate",e=>{async function i(){for(const t of await caches.keys())t!==c&&await caches.delete(t)}e.waitUntil(i())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function i(){const t=new URL(e.request.url),n=await caches.open(c);if(p.includes(t.pathname)){const a=await n.match(t.pathname);if(a)return a}try{const a=await fetch(e.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&n.put(e.request,a.clone()),a}catch(a){const m=await n.match(e.request);if(m)return m;throw a}}e.respondWith(i())});
