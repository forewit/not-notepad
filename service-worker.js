const s=location.pathname.split("/").slice(0,-1).join("/"),l=[s+"/app/immutable/entry/app.zMtzMbd9.js",s+"/app/immutable/nodes/0.0n-A2EDI.js",s+"/app/immutable/assets/0.DkWQ23sC.css",s+"/app/immutable/nodes/1.DtOJt4tH.js",s+"/app/immutable/nodes/2.COZ3EJSw.js",s+"/app/immutable/assets/2.rEUatG16.css",s+"/app/immutable/nodes/3.DvBGsbjN.js",s+"/app/immutable/assets/3.C2hubh8Z.css",s+"/app/immutable/nodes/4.CATbcv3Z.js",s+"/app/immutable/assets/4.D9K7nQOp.css",s+"/app/immutable/assets/Spinner.nORNYfl0.css",s+"/app/immutable/chunks/Spinner.wdsbRmLv.js",s+"/app/immutable/chunks/_commonjsHelpers.Cpj98o6Y.js",s+"/app/immutable/chunks/core.BcGEfq3s.js",s+"/app/immutable/chunks/each.qCoEctRN.js",s+"/app/immutable/chunks/entry.CPd7RzGu.js",s+"/app/immutable/chunks/firebaseStore.DNqBV2P_.js",s+"/app/immutable/chunks/index.B8-vJTHY.js",s+"/app/immutable/chunks/index.BSd0CfbD.js",s+"/app/immutable/chunks/paths.D4Vgz-Bt.js",s+"/app/immutable/chunks/preload-helper.D6kgxu3v.js",s+"/app/immutable/chunks/scheduler.CgGcoA3v.js",s+"/app/immutable/chunks/themes.BTx5Q4mv.js",s+"/app/immutable/entry/start.B7gOAwtp.js",s+"/app/immutable/chunks/quill.CreUs8Bn.js"],u=[s+"/images/favicon.png",s+"/images/field_512.png",s+"/images/svg/cancel.svg",s+"/images/svg/double-checkmark.svg",s+"/images/svg/gear.svg",s+"/images/svg/home.svg",s+"/images/svg/login.svg",s+"/images/svg/logout.svg",s+"/images/svg/plus.svg",s+"/images/svg/refresh.svg",s+"/images/svg/swap.svg",s+"/images/svg/triangle-down.svg",s+"/images/svg/triangle-left.svg",s+"/images/svg/triangle-right.svg",s+"/images/svg/triangle-up.svg",s+"/manifest.json"],o="1721062641671",c=`cache-${o}`,p=[...l,...u];self.addEventListener("install",e=>{async function n(){await(await caches.open(c)).addAll(p)}e.waitUntil(n())});self.addEventListener("activate",e=>{async function n(){for(const t of await caches.keys())t!==c&&await caches.delete(t)}e.waitUntil(n())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function n(){const t=new URL(e.request.url),i=await caches.open(c);if(p.includes(t.pathname)){const a=await i.match(t.pathname);if(a)return a}try{const a=await fetch(e.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&i.put(e.request,a.clone()),a}catch(a){const m=await i.match(e.request);if(m)return m;throw a}}e.respondWith(n())});
