const e=location.pathname.split("/").slice(0,-1).join("/"),p=[e+"/app/immutable/entry/app.BhP4pySi.js",e+"/app/immutable/nodes/0.Cm8dISdb.js",e+"/app/immutable/assets/0.CwgjanyS.css",e+"/app/immutable/nodes/1.CWRbux0X.js",e+"/app/immutable/nodes/2.Cx46fXoI.js",e+"/app/immutable/assets/2.CIWGZlfr.css",e+"/app/immutable/chunks/entry.DLw8WVw7.js",e+"/app/immutable/chunks/index.HXHA9SiQ.js",e+"/app/immutable/chunks/scheduler.CtbWrGNo.js",e+"/app/immutable/entry/start.7mMow3sh.js"],l=[e+"/images/favicon.png",e+"/images/field_512.png",e+"/manifest.json"],u="1716408400324",c=`cache-${u}`,r=[...p,...l];self.addEventListener("install",s=>{async function n(){await(await caches.open(c)).addAll(r)}s.waitUntil(n())});self.addEventListener("activate",s=>{async function n(){for(const t of await caches.keys())t!==c&&await caches.delete(t)}s.waitUntil(n())});self.addEventListener("fetch",s=>{if(s.request.method!=="GET")return;async function n(){const t=new URL(s.request.url),i=await caches.open(c);if(r.includes(t.pathname)){const a=await i.match(t.pathname);if(a)return a}try{const a=await fetch(s.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&i.put(s.request,a.clone()),a}catch(a){const o=await i.match(s.request);if(o)return o;throw a}}s.respondWith(n())});
