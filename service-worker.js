const s=location.pathname.split("/").slice(0,-1).join("/"),l=[s+"/app/immutable/entry/app.CQiub_OO.js",s+"/app/immutable/nodes/0.DmkkspT2.js",s+"/app/immutable/assets/0.Cg0c7RFY.css",s+"/app/immutable/nodes/1.DBZ7wAWT.js",s+"/app/immutable/nodes/2.BHzYIhaW.js",s+"/app/immutable/assets/2.X0bq0cAS.css",s+"/app/immutable/nodes/3.BGLHJJgz.js",s+"/app/immutable/assets/3.C2hubh8Z.css",s+"/app/immutable/nodes/4.7fE35ZQ1.js",s+"/app/immutable/assets/4.C0M72fHc.css",s+"/app/immutable/assets/Spinner.DVk0brZ3.css",s+"/app/immutable/chunks/Spinner.mMaK95Dt.js",s+"/app/immutable/chunks/each.qM7zWQQ9.js",s+"/app/immutable/chunks/entry.DDGKKOZe.js",s+"/app/immutable/chunks/firebaseStore.BnHnmvqp.js",s+"/app/immutable/chunks/index.BC2r3XlJ.js",s+"/app/immutable/chunks/index.D3AM1jqD.js",s+"/app/immutable/chunks/paths.bXkiZD-u.js",s+"/app/immutable/chunks/preload-helper.D6kgxu3v.js",s+"/app/immutable/chunks/scheduler.cfeIpFhx.js",s+"/app/immutable/chunks/settingsStore.CsKC20lt.js",s+"/app/immutable/chunks/tabsStore.tZ-wagmx.js",s+"/app/immutable/chunks/themes.ChGLdU4W.js",s+"/app/immutable/entry/start.Bgn4djkA.js",s+"/app/immutable/chunks/quill.k3P2vbB8.js"],u=[s+"/images/favicon.png",s+"/images/field_512.png",s+"/images/svg/cancel.svg",s+"/images/svg/double-checkmark.svg",s+"/images/svg/login.svg",s+"/images/svg/logout.svg",s+"/images/svg/plus.svg",s+"/images/svg/swap.svg",s+"/images/svg/triangle-down.svg",s+"/images/svg/triangle-left.svg",s+"/images/svg/triangle-right.svg",s+"/images/svg/triangle-up.svg",s+"/manifest.json"],r="1720469764384",c=`cache-${r}`,m=[...l,...u];self.addEventListener("install",e=>{async function i(){await(await caches.open(c)).addAll(m)}e.waitUntil(i())});self.addEventListener("activate",e=>{async function i(){for(const t of await caches.keys())t!==c&&await caches.delete(t)}e.waitUntil(i())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function i(){const t=new URL(e.request.url),n=await caches.open(c);if(m.includes(t.pathname)){const a=await n.match(t.pathname);if(a)return a}try{const a=await fetch(e.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&n.put(e.request,a.clone()),a}catch(a){const p=await n.match(e.request);if(p)return p;throw a}}e.respondWith(i())});
